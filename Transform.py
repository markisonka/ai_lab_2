import albumentations as A
import albumentations.pytorch as Ap


def get_transforms(SIZE):
    val_transforms = A.Compose([
        A.Resize(SIZE, SIZE),
        A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),
        Ap.transforms.ToTensorV2()
        ])
    train_transforms =A.Compose([
        A.Resize(SIZE, SIZE),
        A.Flip(p=0.5),                          #Отразите вход по горизонтали, вертикали или по горизонтали и вертикали.
        A.Rotate(p=0.5),                        #Поверните ввод на угол, случайно выбранный из равномерного распределения. 

        A.core.composition.OneOf ([ 
            A.Blur(p=0.5),                      #Размытие входного изображения с помощью ядра случайного размера. 
            A.GaussianBlur(p=0.5),              #Размытие входного изображения с помощью фильтра Гаусса со случайным размером ядра. 
            A.GaussNoise(p=0.5),                #Примените гауссовский шум к входному изображению. 
            A.ISONoise(p=0.5),                  #Примените шум сенсора камеры. 
            A.MedianBlur(p=0.5),                #Размытие входного изображения с помощью медианного фильтра со случайным линейным размером апертуры.
            A.MotionBlur(p=0.5),                #Примените размытие движения к входному изображению, используя ядро случайного размера. 
            A.CLAHE(p=0.5),                     #Примените коррекцию адаптивной гистограммы с ограничением контраста к входному изображению.
            A.Equalize(p=0.5),                  #Выровняйте гистограмму изображения. 
        ], p = 0.5),
        A.core.composition.OneOf ([ 
            A.ChannelDropout(p=0.5),            #Случайно отбросьте каналы во входном изображении.
            A.ChannelShuffle(p=0.5),            #Произвольно переставьте каналы входного изображения RGB.
            A.InvertImg(p=0.5),                 #Инвертируйте входное изображение, вычитая значения пикселей из 255
            A.Solarize(p=0.5),                  #Инвертировать все значения пикселей выше порога. 
            A.ToGray(p=0.5),                    #Преобразуйте входное изображение RGB в оттенки серого.
            A.HueSaturationValue(p=0.5),        #Произвольно изменяйте оттенок, насыщенность и значение входного изображения. 
            A.RandomBrightnessContrast(p=0.5),  #Произвольно изменяйте яркость и контраст входного изображения.
        ], p = 0.5),

        A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),
        Ap.transforms.ToTensorV2()
        ])    
    return val_transforms, train_transforms
